# SPDX-License-Identifier: MIT
- name: Install Unbound
  apt:
    name: [unbound, unbound-anchor, dns-root-data]

- name: Update resolv.conf
  register: resolvconf
  lineinfile:
    path: /etc/resolv.conf
    regexp: '^nameserver '
    line: 'nameserver 127.0.0.1'

- name: Trigger resolvconf update
  when: resolvconf.changed
  command: "resolvconf -u"

- name: Install Postfix
  apt:
    name: [postfix, postfix-pcre, mailutils]


- name: set /etc/mailname
  copy:
    dest: /etc/mailname
    owner: root
    group: root
    mode: 0644
    content: |
      {{ inventory_hostname }}

# - name: Ensure that Postfix does not run
#   systemd:
#     name: postfix
#     state: stopped

- name: Generate our own DH parameters, see http://www.postfix.org/postconf.5.html#smtp_tls_policy_maps for details
  openssl_dhparam:
    size: 2048
    mode: 0640
    owner: root
    group: root
    path: /etc/postfix/dh2048.pem

- name: 'virtual_alias_map and bad_senders'
  include_tasks: write_and_hash.yml
  loop:
    - {'src': 'virtual_alias_map', 'dest': '/etc/postfix/virtual_alias_map', 'cmd': 'postmap', 'template': true}
    - {'src': 'bad_senders', 'dest': '/etc/postfix/bad_senders', 'cmd': 'postmap'}
    - {'src': 'bad_clients', 'dest': '/etc/postfix/bad_clients'}
    - {'line': 'root: michael@michreichert.de', 'dest': '/etc/aliases', 'cmd': 'postalias'}

- name: Write /etc/postfix/main.cf
  template:
    dest: /etc/postfix/main.cf
    src: main.cf
    owner: root
    group: root
    mode: 0644
  notify:
    - systemd reload postfix

- name: Write /etc/postfix/master.cf
  copy:
    dest: /etc/postfix/master.cf
    src: master.cf
    owner: root
    group: root
    mode: 0644
  notify:
    - systemd restart postfix

- name: Write header checks for simple spam filtering to /etc/postfix/header_checks and Postscreen IP blacklist
  copy:
    dest: '/etc/postfix/{{ item }}'
    owner: root
    group: root
    mode: 0644
    src: '{{ item }}'
  loop:
    - 'header_checks.pcre'
    #- 'postscreen_access.cidr'
  notify:
    - systemd reload postfix

- name: Install OpenDKIM
  block:
    - name: Install OpenDKIM from APT
      apt:
        name: [opendkim, opendkim-tools]

    - name: Write /etc/opendkim.conf
      copy:
        src: opendkim.conf
        dest: /etc/opendkim.conf
        owner: root
        group: root
        mode: 0644
      notify:
        - systemd restart opendkim

    - name: Ensure correct permissions on /etc/opendkim
      file:
        state: directory
        path: /etc/opendkim
        owner: root
        group: root
        mode: 0755

    - name: Ensure correct permissions on /etc/opendkim/keys
      file:
        state: directory
        path: /etc/opendkim/keys
        owner: root
        group: opendkim
        mode: 0750
      notify:
        - systemd restart opendkim

    - name: Create OpenDKIM key
      command:
        chdir: /etc/opendkim
        cmd: 'opendkim-genkey --selector=2025 --bits=2048 --directory=keys'
        creates: /etc/opendkim/keys/2025.private
      register: opendkim_key_creation

    - name: Make OpenDKIM key readable for user opendkim
      when: opendkim_key_creation.changed
      file:
        path: '/etc/opendkim/keys/{{ item }}'
        owner: opendkim
        group: root
        mode: 0600
      loop:
        - '2025.private'
        - '2025.txt'

    - name: Print public OpenDKIM key
      when: opendkim_key_creation.changed
      block:
        - name: Read /etc/opendkim/keys/2025.txt
          slurp:
            src: /etc/opendkim/keys/2025.txt
          register: opendkim_public_key
        - name: Print public OpenDKIM key
          debug:
            msg: 'Please publish the following DNS entry with your public DKIM key:\n{{ opendkim_public_key }}'

    - name: Write /etc/opendkim/keytable
      copy:
        dest: /etc/opendkim/keytable
        owner: root
        group: root
        mode: 0644
        content: |
          default    openrailwaymap.org:2025:/etc/opendkim/keys/2025.private
      notify:
        - systemd restart opendkim

    - name: Write /etc/opendkim/signingtable
      copy:
        dest: /etc/opendkim/signingtable
        owner: root
        group: root
        mode: 0644
        content: |
          *@openrailwaymap.org default
          *@{{ inventory_hostname }} default
      notify:
        - systemd restart opendkim

    - name: Create /var/spool/postfix/opendkim
      file:
        path: /var/spool/postfix/opendkim
        owner: opendkim
        group: opendkim
        mode: 0755
        state: directory

- name: Add Postfix to opendkim group
  user:
    append: yes
    name: postfix
    groups: opendkim

- name: Add rspamd-stable repository
  block:
    - name: Create directory /etc/apt/keyrings/
      file:
        path: /etc/apt/keyrings/
        state: directory
        owner: root
        group: root
        mode: 0755
    - name: Check if Rspamd GPG key exists already
      register: rspamd_key
      stat:
        path: /etc/apt/keyrings/rspamd-apt-stable.gpg
    - when: not rspamd_key.stat.exists
      ansible.builtin.get_url:
        url: https://rspamd.com/apt-stable/gpg.key
        dest: /etc/apt/keyrings/rspamd-apt-stable.asc
        checksum: sha256:218ef36314c2e4c8a0b05702cf7489c12e18e69916e805d806e6464d87277bec
    - when: not rspamd_key.stat.exists
      shell:
        cmd: 'gpg --dearmor < /etc/apt/keyrings/rspamd-apt-stable.asc > /etc/apt/keyrings/rspamd.gpg'
        creates: /etc/apt/keyrings/rspamd.gpg
    - ansible.builtin.apt_repository:
        repo: "deb [arch=amd64 signed-by=/etc/apt/keyrings/rspamd.gpg] http://rspamd.com/apt-stable/ {{ ansible_distribution_release }} main"
        state: present

- name: Install Rspamd
  apt:
    name: [rspamd, redis-server]

- name: Configure Rspamd
  notify: [systemctl restart rspamd]
  copy:
    dest: '{{ item.dest }}'
    owner: root
    group: root
    mode: 0644
    content: '{{ item.content }}'
  loop:
    - dest: '/etc/rspamd/local.d/milter_headers.conf'
      content: |
        use = ["x-spamd-bar", "x-spam-level", "authentication-results"];
        authenticated_headers = ["authentication-results"];
    - dest: /etc/rspamd/local.d/redis.conf
      content: |
        servers = "127.0.0.1";
    - dest: /etc/rspamd/override.d/classifier-bayes.conf
      content: |
        autolearn = true;
    - dest: /etc/rspamd/local.d/multimap.conf
      content: |
        WHITELIST_IP {
            type = "ip";
            map = "$CONFDIR/local.d/whitelist_ip.map";
            description = "Local ip whitelist";
            action = "accept";
        }
        WHITELIST_FROM {
            type = "from";
            map = "$CONFDIR/local.d/whitelist_from.map";
            description = "Local from whitelist";
            action = "accept";
        }
        BLACKLIST_IP {
            type = "ip";
            map = "$CONFDIR/local.d/blacklist_ip.map";
            description = "Local ip blacklist";
            action = "reject";
        }
        BLACKLIST_FROM {
            type = "from";
            map = "$CONFDIR/local.d/blacklist_from.map";
            description = "Local from blacklist";
            action = "reject";
        }
    # Disable DKIM (TODO drop OpenDKIM, use Rspamd)
    - dest: /etc/rspamd/local.d/dkim_signing.conf
      content: "enabled = false;"
    # Disable ARC (TODO drop OpenDKIM, use Rspamd)
    - dest: /etc/rspamd/local.d/arc.conf
      content: "enabled = false;"
    # Disable greylist (TODO drop Postgrey, use Rspamd)
    - dest: /etc/rspamd/local.d/greylist.conf
      content: "enabled = false;"

- name: Create white and blacklist files
  file:
    state: touch
    owner: root
    group: root
    mode: 0644
    path: '/etc/rspamd/local.d/{{ item }}'
  loop:
    - whitelist_ip.map
    - whitelist_from.map
    - blacklist_ip.map
    - blacklist_from.map

- debug:
    msg: Plase set Rspamd password has in /etc/rspamd/local.d/worker-controller.inc. You can generate it using "rspamadm pw"

- debug:
    msg: 'You can connect to the Rspamd web frontend using a SSH tunnel ("ssh -NL 8080:localhost:11334 {{ansible_user}}@{{inventory_hostname}}") and then access the frontend at http://localhost:8080/'

- name: Mailman 3 setup
  when: mail.mailman3
  block:
    - name: 'Create entries in Debconf database for Mailman 3 setup' # noqa no-changed-when
      command:
        cmd: 'debconf-set-selections'
        stdin: "{{ lookup('file', 'mailman3_debconf_settings') }}"

    - name: Install packages of Mailman 3 from APT
      apt:
        name: [mailman3-full, postgresql, python3-django-mailman3, python3-django-captcha, sox, flite, uwsgi]

    - name: Enable peer authentication for PostgreSQL for user mailman3
      postgresql_pg_hba:
        contype: local
        databases: '{{ item.db }}'
        dest: '/etc/postgresql/{{ pg_version }}/main/pg_hba.conf'
        method: md5
        users: '{{ item.user }}'
        mode: 0640
        owner: postgres
        group: postgres
      loop:
        - {'user': 'www-data', 'db': 'mailman3web'}
        - {'user': 'lists', 'db': 'mailman3'}
      notify:
        - systemd reload postgresql

    - name: Modify /etc/mailman3/mailman.cfg
      lineinfile:
        path: /etc/mailman3/mailman.cfg
        regexp: '{{ item.regexp }}'
        line: '{{ item.line }}'
      loop:
        - {'regexp': '^#?site_owner: ', 'line': 'site_owner: info@openrailwaymap.org'}
      notify:
        - systemd restart mailman3

    - name: 'Mailman 3: set default encoding to utf-8'
      blockinfile:
        path: /etc/mailman3/mailman.cfg
        block: |
          [language.master]
          description: English (USA)
          charset: utf-8
          enabled: yes
      notify:
        - systemd restart mailman3

    - name: 'Hyperkitty/Postorius: set links to imprint and privacy policy'
      blockinfile:
        path: /etc/mailman3/mailman-web.py
        block: |
          #INSTALLED_APPS = INSTALLED_APPS + tuple(['captcha'])
          #INSTALLED_APPS = INSTALLED_APPS + tuple(['allauth.socialaccount.providers.openstreetmap', 'captcha'])
          #ACCOUNT_SIGNUP_FORM_CLASS = 'django_mailman3.forms.CaptchaSignupForm'
          #import shutil
          #CAPTCHA_FLITE_PATH = shutil.which('flite')
          #CAPTCHA_SOX_PATH = shutil.which('sox')
          #SHOW_ANONYMOUS_SUBSCRIBE_FORM = False
          # Footer links
          FOOTER_LINKS = [
              {
                  'url': 'https://www.openrailwaymap.org/imprint-en.html',
                  'text': 'Imprint/Privacy Policy',
                  'translations': {
                      'de': 'Impressum/Datenschutzerklärung'
                  }
              },
          ]
      notify:
        - systemd restart mailman3-web

    - name: 'Mailman 3: Disable Gravatar'
      lineinfile:
        path: /etc/mailman3/mailman-web.py
        regexp: '{{ item.regexp }}'
        line: '{{ item.line }}'
      loop:
        - {'regexp': '^(# ?)?GRAVATAR_DISABLED = .*$', 'line': 'GRAVATAR_DISABLED = True'}
      notify:
        - systemd restart mailman3-web

    - name: Modify /etc/mailman3/mailman-web.py
      replace:
        path: /etc/mailman3/mailman-web.py
        regexp: '{{ item.regexp }}'
        replace: '{{ item.line }}'
      loop:
        - {'regexp': "^ADMINS = \\(\\n( *)\\('[^']*', '[^']*'\\), *\\n\\)", 'line': "ADMINS = (\\n    ('OpenRailwayMap Mailman Admin', 'info@openrailwaymap.org'),\\n)"}
        - {'regexp': "^    #? *'django.contrib.admindocs', *$", 'line': "    'django.contrib.admindocs',"}
        - {'regexp': "^( *)#?( *'django_mailman3\\.lib\\.auth\\.fedora', *)$", 'line': "\\1#\\2"}
        - {'regexp': "^#? *SECURE_PROXY_SSL_HEADER = \\('HTTP_X_FORWARDED_PROTO', 'https'\\)", 'line': "SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')"}
        - {'regexp': "^#? *SESSION_COOKIE_SECURE =.[^\n]*$", 'line': "SESSION_COOKIE_SECURE = True"}
        - {'regexp': "^#? *SECURE_CONTENT_TYPE_NOSNIFF =.[^\n]*$", 'line': "SECURE_CONTENT_TYPE_NOSNIFF = True"}
        - {'regexp': "^#? *SECURE_BROWSER_XSS_FILTER =.[^\n]*$", 'line': "SECURE_BROWSER_XSS_FILTER = True"}
        - {'regexp': "^#? *CSRF_COOKIE_SECURE =.[^\n]*$", 'line': "CSRF_COOKIE_SECURE = True"}
        - {'regexp': "^#? *CSRF_COOKIE_HTTPONLY =.[^\n]*$", 'line': "CSRF_COOKIE_HTTPONLY = True"}
        - {'regexp': "^#? *X_FRAME_OPTIONS =.[^\n]*$", 'line': "X_FRAME_OPTIONS = 'DENY'"}
        - {'regexp': "^#? *EMAILNAME =.[^\n]*$", 'line': "EMAILNAME = 'openrailwaymap.org'"}
        - {'regexp': "^#?( *)'HOST': '[^']+',[^\n]*$", 'line': "\\1'HOST': '',"}
#        - {'regexp': "^#?(    +)#? *'allauth.socialaccount.providers.github', *$", 'line': "\\1'allauth.socialaccount.providers.github',"}
      notify:
        - systemd restart mailman3-web

    # The python3-django-hyperkitty package does not copy its assets to /var/lib/mailman3/web/static
    # Therefore, we need a separate Alias for it in the Apache configuration.
    - name: Add custom alias for /mailman3/static/hyperkitty in /etc/mailman3/apache.conf
      lineinfile:
        path: /etc/mailman3/apache.conf
        insertbefore: '^ *Alias /mailman3/static '
        line: 'Alias /mailman3/static/hyperkitty /usr/share/python3-django-hyperkitty/static/hyperkitty'

        # It is likely that running a migration is not necessary.
    - name: 'Run django-admin migrate'
      become: yes
      become_user: 'www-data'
      django_manage:
        app_path: '/usr/share/mailman3-web/'
        python_path: '/usr/share/mailman3-web'
        command: 'migrate'
          # settings imports settings_local at the end of the file
        settings: 'settings'
      notify:
        - systemd restart mailman3-web

    - name: Change Postorius site name
      become: yes
      become_user: postgres
      postgresql_query:
        db: mailman3web
        login_user: postgres
        query: "UPDATE django_site SET domain = 'lists.openrailwaymap.org', name = 'openrailwaymap.org' WHERE domain = 'example.com';"
      notify:
        - systemd restart mailman3-web

    - name: Enable Mailman3 UWSGI app
      file:
        src: /etc/mailman3/uwsgi.ini
        dest: /etc/uwsgi/apps-enabled/mailman3.ini
        state: link
        owner: root
        group: root

    - name: Change URL for Hyperkitty to get emails from (add authentication)
      lineinfile:
        path: /etc/mailman3/mailman-hyperkitty.cfg
        regexp: '^base_url: .*$'
        line: 'base_url: http://127.0.0.1/mailman3/hyperkitty/'

- name: systemctl start postfix
  systemd:
    name: 'postfix'
    state: started
