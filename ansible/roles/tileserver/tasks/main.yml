# SPDX-License-Identifier: MIT
- name: Install database packages using apt
  apt:
    name: [postgresql, postgis]

- name: Install pyscopg2 because it is a dependency for Ansible's PostgreSQL module
  apt:
    name: python3-psycopg2

- name: Create /nvme/postgresql for fast PostgreSQL tablespace
  file:
    path: /nvme/postgresql
    owner: postgres
    group: postgres
    mode: 0700
    state: directory
  register: postgres_directory

- name: Install helpful packages for map style debugging
  apt:
    name: nik4

- name: Start PostgreSQL
  systemd:
    name: postgresql
    state: started

- name: Create PostgreSQL tablespace on NVME
  become: yes
  become_user: postgres
  postgresql_tablespace:
    name: nvme
    owner: postgres
    location: /nvme/postgresql

- name: Create system user osmimport
  user:
    name: osmimport
    shell: '/usr/sbin/nologin'
    home: '{{ osm_data_dir }}'
    comment: 'OSM data import user'
    password: '*'
    system: yes

- name: Create directories for flatnodes file, tile expiry list and temporary directory for planet update
  file:
    path: '{{ item }}'
    owner: osmimport
    group: osmimport
    state: directory
    mode: '0755'
  loop:
    - '{{ flatnodes_dir }}'
    - '{{ tile_expiry_dir }}'
    - '{{ osm_data_dir }}/tmp'

- name: Create database user osmimport for data import and update
  become: true
  become_user: postgres
  postgresql_user:
    name: osmimport
    db: 'postgres'

- name: 'Create database {{ osm_dbname }}'
  become: true
  become_user: postgres
  postgresql_db:
    name: '{{ osm_dbname }}'
    encoding: "utf-8"
    state: present
    owner: osmimport
    tablespace: nvme

- name: Create database extension PostGIS and Hstore
  become: true
  become_user: postgres
  postgresql_ext:
    db: '{{ osm_dbname }}'
    name: '{{ item }}'
  loop:
    - 'postgis'
    - 'hstore'

- name: Enable peer authentication for PostgreSQL
  postgresql_pg_hba:
    contype: local
    databases: '{{ osm_dbname }}'
    dest: '/etc/postgresql/{{ pg_version }}/main/pg_hba.conf'
    method: peer
    users: 'osmimport,tirex'
    mode: 0640
    owner: postgres
    group: postgres
  notify:
    - systemd reload postgresql

- name: Create database user for tile rendering
  become: true
  become_user: postgres
  postgresql_user:
    name: tirex
    db: '{{ osm_dbname }}'

- name: Install Osm2pgsql
  apt:
    name: osm2pgsql

- name: Install other tile serving dependencies from Apt
  apt:
    name: wget,gdal-bin,nodejs,npm,libwww-perl,mapnik-utils,bc,git,osmium-tool,python3-pyosmium,pyosmium

- name: Create directories for scripts
  file:
    path: '{{ item }}'
    owner: root
    group: root
    state: directory
    mode: '0755'
  loop:
    - '{{ tileserver_script_dir }}/scripts'
    - '{{ tileserver_script_dir }}/post-update.d'

- name: Copy scripts # noqa risky-file-permissions
  ansible.builtin.copy:
    dest: '{{ tileserver_script_dir }}/'
    src: 'files/scripts'
    owner: root
    group: root

- name: Write Systemd Unit file for update-data
  copy:
    dest: '/etc/systemd/system/update-data.service'
    mode: 0644
    owner: root
    group: root
    content: |
      [Unit]
      Description=Update OSM data and apply diff to database
      After=syslog.target network.target
      Requires=postgresql.service tirex-master.service

      [Service]
      Type=simple
      ExecStart=/bin/bash {{ tileserver_script_dir }}/scripts/update_osm.sh
      Environment="OSMIUM_POOL_THREADS=3"
      User=osmimport
      Group=users
      StandardOutput=journal
      StandardError=journal
      SyslogIdentifier=update_osm
      CPUQuota=400%
      Nice=+1
  notify:
    - systemd daemon-reload

- name: Write Systemd Timer for update-data.timer
  copy:
    dest: '/etc/systemd/system/update-data.timer'
    mode: 0644
    owner: root
    group: root
    content: |
      [Unit]
      Description=Update OSM data and apply diff to database

      [Timer]
      OnCalendar=*-*-* 0,8,13,20:05
      Unit=update-data.service

      [Install]
      WantedBy=default.target
  notify:
    - systemd daemon-reload
    - systemd restart update-data.timer

- name: Write Systemd Unit file for rerender-lowzoom-tiles.service
  copy:
    dest: '/etc/systemd/system/rerender-lowzoom-tiles.service'
    mode: 0644
    owner: root
    group: root
    content: |
      [Unit]
      Description=Rerender low zoom tiles
      After=syslog.target network.target
      Requires=postgresql.service tirex-master.service

      [Service]
      Type=simple
      ExecStart=/usr/bin/tirex-batch -p 26 map=standard,maxspeed,signals,electrification,gauge z=0-9 bbox=-150,-55,180,71
      User=tirex
      Group=users
      StandardOutput=journal
      StandardError=journal
  notify:
    - systemd daemon-reload

- name: Write Systemd Timer for rerender-lowzoom-tiles.timer
  copy:
    dest: '/etc/systemd/system/rerender-lowzoom-tiles.timer'
    mode: 0644
    owner: root
    group: root
    content: |
      [Unit]
      Description=Rerender low zoom tiles

      [Timer]
      OnUnitActiveSec=30d
      OnBootSec=2h
      Unit=rerender-lowzoom-tiles.service

      [Install]
      WantedBy=default.target
  notify:
    - systemd daemon-reload

- name: Install fonts for map style
  apt:
    name: [fonts-noto-cjk, fonts-noto-hinted, fonts-noto-unhinted, fonts-noto-color-emoji, fonts-hanazono, fonts-unifont]

- name: Create directory for CartoCSS map style repository
  file:
    path: '{{ cartocss_dir }}'
    owner: osmimport
    group: osmimport
    state: directory
    mode: '0755'

- name: Clone CartoCSS map style repository
  become_user: osmimport
  git:
    dest: '{{ cartocss_dir }}'
    repo: https://github.com/OpenRailwayMap/OpenRailwayMap-CartoCSS.git
    version: 9f38e151a70ff7b91f88623c17b812a69b62995c

- name: Run import
  command: "systemd-run osm_import {{ tileserver_script_dir }}/scripts/import_osm.sh"
  args:
    creates: /nvme/data/timestamp.txt

- name: 'Is the import (still) running?' # noqa command-instead-of-module
  command: systemctl is-active osm_import
  failed_when: False
  changed_when: False
  ignore_errors: True
  register: osm_import
  check_mode: no

- name: 'Does the timestamp file exist already'
  stat:
    path: '/nvme/data/timestamp.txt'
  register: timestamp_file

- set_fact: # noqa unnamed-task
    download_status: "{% if not osm_import or (osm_import.stdout == 'inactive' and timestamp_file.stat.exists) %}complete{% else %}incomplete{% endif %}"
  check_mode: no
