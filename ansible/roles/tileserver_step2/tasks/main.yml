# SPDX-License-Identifier: MIT
- name: Create database functions and views for the map style
  include_tasks: run_sql.yml
  loop:
    - '{{ cartocss_dir }}/sql/functions.sql'
    - '{{ cartocss_dir }}/sql/osm_carto_views.sql'
    - '{{ cartocss_dir }}/sql/get_station_importance.sql'

- name: Create indexes to boost up rendering
  become: true
  become_user: postgres
  postgresql_idx:
    db: '{{ osm_dbname }}'
    idxname: '{{ item.name }}'
    idxtype: gist
    columns: way
    cond: '{{ item.where }}'
    table: '{{ item.table }}'
  loop:
    - name: 'openrailwaymap_line_all_but_ab_raz_prop'
      where: "railway IN ('rail', 'tram', 'light_rail', 'subway', 'narrow_gauge', 'disused', 'construction')"
      table: planet_osm_line
    - name: 'openrailwaymap_line_low'
      where: "railway = 'rail' AND tags->'usage' IN ('main', 'branch') AND service IS NULL"
      table: planet_osm_line
    - name: 'openrailwaymap_line_med'
      where: "railway = 'rail' AND tags->'usage' = 'main' AND service IS NULL"
      table: planet_osm_line
    - name: 'openrailwaymap_electrification_signals'
      where: "railway = 'signal' AND tags ? 'railway:signal:electricity'"
      table: planet_osm_line

- name: 'GRANT SELECT ON ALL TABLES IN SCHEMA public TO tirex'
  become: true
  become_user: postgres
  postgresql_privs:
    role: tirex
    type: table
    objs: ALL_IN_SCHEMA
    privs: 'SELECT'
    database: '{{ osm_dbname }}'

- name: Install Carto and build Mapnik XML style file
  become: yes
  become_user: osmimport
  block:
    - name: Install Carto
      npm:
        name: carto
        version: '1.2.0'
        path: '{{ cartocss_dir }}'

    - name: Build Mapnik XML style files
      make:
        chdir: '{{ cartocss_dir }}'
        target: all
        params:
          CARTO: '{{ cartocss_dir }}/node_modules/carto/bin/carto'
      notify:
        - systemd reload tirex-backend-manager

- name: Enable Apache module mod_ssl
  apache2_module:
    name: ssl
    state: present
  notify:
    - systemd restart apache2
  when: "'letsencrypt' in group_names"

- name: Create /var/www/tiles to avoid a2dismod and a2dissite (and their counterparts) return status code != 0 due to missing document root
  file:
    path: '/var/www/tiles'
    owner: root
    group: root
    state: directory
    mode: '0755'

- name: Install mod_tile, tirex-core and tirex-backend-mapnik
  apt:
    deb: '{{ item }}'
  loop:
    - '/root/packages/tirex-core_0.6.1_amd64.deb'
    - '/root/packages/tirex-backend-mapnik_0.6.1_amd64.deb'
    - '/root/packages/libapache2-mod-tile_0.4-12~precise2_amd64.deb'
  notify:
    # Tirex and Apache are only restarted/reloaded if Ansible had to change something on the remote host (i.e. we install new package)
    - systemd reload apache2
    - systemd restart tirex-backend-manager
    - systemd restart tirex-master

- name: Create symlink from /var/lib/mod_tile to /var/lib/tirex/tiles
  file:
    src: /var/lib/tirex/tiles
    path: /var/lib/mod_tile
    state: link
    force: yes

- name: Ensure that /var/lib/tirex/tiles is owned by tirex:tirex
  file:
    path: /var/lib/tirex/tiles
    state: directory
    owner: tirex
    group: tirex
    mode: 0755
  notify:
    - systemd reload tirex-backend-manager
    - systemd reload tirex-master

- name: 'Tirex: Change Mapnik plugin path in /etc/tirex/renderer/mapnik.conf'
  lineinfile:
    path: /etc/tirex/renderer/mapnik.conf
    regexp: '^plugindir=/usr/lib/mapnik/(3\.0/)?input/?$'
    line: 'plugindir=/usr/lib/mapnik/3.0/input/'
  notify:
    - systemd reload tirex-backend-manager

- name: 'Tirex: Set syslog facility to daemon in /etc/tirex/renderer/mapnik.conf'
  lineinfile:
    path: /etc/tirex/renderer/mapnik.conf
    regexp: '^#? *syslog_facility=daemon$'
    line: 'syslog_facility=daemon'
  notify:
    - systemd reload tirex-backend-manager

- name: 'Tirex: Change Mapnik fonts path in /etc/tirex/renderer/mapnik.conf'
  lineinfile:
    path: /etc/tirex/renderer/mapnik.conf
    regexp: '^fontdir=/usr/(lib/mapnik|share)/fonts/?$'
    line: 'fontdir=/usr/share/fonts/'
  notify:
    - systemd reload tirex-backend-manager

- name: 'Tirex: Enable recursive search in Mapnik fonts path in /etc/tirex/renderer/mapnik.conf'
  lineinfile:
    path: /etc/tirex/renderer/mapnik.conf
    regexp: '^#?fontdir_recurse='
    line: 'fontdir_recurse=1'
  notify:
    - systemd reload tirex-backend-manager

- name: 'Tirex: Configure buckets'
  lineinfile:
    path: /etc/tirex/tirex.conf
    regexp: '^bucket +name=({{ item.bucket }}|{{ item.oldname }}) +minprio=\d+ +maxproc=\d+ +maxload=\d+$'
    line: 'bucket name={{ item.bucket }} minprio={{ item.minprio}} maxproc={{ item.maxproc }} maxload={{ item.maxload }}'
  loop:
    - bucket: live
      oldname: live
      minprio: 1
      maxproc: 4
      maxload: 20
      # Upstream minprio 10, maxproc 3, maxload 8
    - bucket: important
      oldname: important
      minprio: 10
      maxproc: 2
      maxload: 14
      # Does not exist upstream
    - bucket: expiredtiles
      oldname: expiredtiles
      minprio: 15
      maxproc: 2
      maxload: 9
      # Upstream called "background", minprio 20, maxproc 2, maxload 4
    - bucket: rerenderstyleupdate
      oldname: background
      minprio: 20
      maxproc: 2
      maxload: 4
  notify:
    - systemd reload tirex-master

- name: Install gawk
  apt:
    name: gawk

- name: Clone tileserver demonstration page repository
  git:
    dest: /var/www/tiles
    repo: https://github.com/geofabrik/tileserver-demosite.git
    version: 5571bb913905fba6def4eb194efdc80d4620cc42

- name: Configure demonstration page
  template:
    src: settings.js
    dest: /var/www/tiles/settings.js
    mode: 0644
    owner: root
    group: root

- name: Build demonstration page
  make:
    chdir: /var/www/tiles
    target: all

- name: Deactivate default tileserver page
  command:
    cmd: a2dissite tileserver_site.conf
    chdir: /etc/apache2/sites-available
    removes: '/etc/apache2/sites-enabled/tileserver_site.conf'
  notify:
    - systemd reload apache2

- name: Create directory for error tiles
  file:
    path: /var/www/tile-util
    owner: root
    group: root
    mode: 0755
    state: directory

- name: Copy error tiles to /var/www/tile-util
  copy:
    src: '{{ item }}'
    dest: '/var/www/tile-util/{{ item }}'
    owner: root
    group: root
    mode: 0644
  loop:
    - black.png
    - attribution-tile.png

- name: Add tileserver configuration for Apache virtualhost
  template:
    src: '{{ item }}'
    dest: '/etc/apache2/sites-available/{{ item }}'
    owner: root
    group: root
    mode: 0664
  loop:
    - 'tiles.openrailwaymap.org.inc'
    - 'tiles.openrailwaymap.org.conf'
  notify:
    - systemd reload apache2

- name: Enable mod_tile because it is enabled by its Debian package by default
  apache2_module:
    name: tile
    state: present
  notify:
    - systemd reload apache2

- name: Enable tileserver configuration
  command:
    cmd: a2ensite tiles.openrailwaymap.org.conf
    chdir: /etc/apache2/sites-available
    creates: '/etc/apache2/sites-enabled/tiles.openrailwaymap.org.conf'
  notify:
    - systemd reload apache2

- name: Create Tirex configuration for all map styles
  copy:
    dest: '/etc/tirex/renderer/mapnik/{{ item }}.conf'
    owner: root
    group: root
    mode: 0664
    content: |
        name={{ item }}
        tiledir=/var/lib/tirex/tiles/{{ item }}
        minz=0
        maxz=19
        mapfile={{ cartocss_dir }}/{{ item }}.xml
        maxrequests=50
        tilesize=512
        scalefactor=2.0
        buffersize=50
  loop: "{{ tileserver.styles }}"
  notify:
    - systemd reload tirex-backend-manager
    - systemd reload tirex-master

- name: Create tile cache directories
  file:
    path: '/var/lib/tirex/tiles/{{ item }}'
    owner: tirex
    group: tirex
    mode: 0755
    state: directory
  loop: "{{ tileserver.styles }}"
  notify:
    - systemd reload tirex-backend-manager
    - systemd reload tirex-master

- name: systemd start and enable tirex-backend-manager.service
  systemd:
    name: tirex-backend-manager
    enabled: yes
    state: started

- name: systemd start and enable tirex-master.service
  systemd:
    name: tirex-backend-manager
    enabled: yes
    state: started

- name: Create Systemd service file for deleting old metatiles regularly
  copy:
    dest: /etc/systemd/system/delete_old_metatiles.service
    mode: 0644
    owner: root
    group: root
    content: |
      [Unit]
      Description=Delete old metatiles
      After=network.target

      [Service]
      Type=simple
      ExecStart=/bin/bash {{ tileserver_script_dir }}/scripts/delete_old_metatiles.sh
      User=tirex
      Group=tirex
      StandardOutput=journal
      StandardError=journal
      SyslogIdentifier=delete_old_metatiles
      Nice=+1
  notify:
    - systemd daemon-reload

- name: Write Systemd Timer for delete_old_metatiles.timer
  copy:
    dest: '/etc/systemd/system/delete_old_metatiles.timer'
    mode: 0644
    owner: root
    group: root
    content: |
      [Unit]
      Description=Delete old metatiles every month

      [Timer]
      OnUnitActiveSec=30d
      OnBootSec=15d
      Unit=delete_old_metatiles.service

      [Install]
      WantedBy=default.target
  notify:
    - systemd daemon-reload
    - systemd restart delete_old_metatiles.timer

- name: Enable update-data, rerender-lowzoom-tiles and delete_old_metatiles.timer
  systemd:
    name: "{{ item }}"
    enabled: yes
    state: started
  loop:
    - "update-data.timer"
    - "rerender-lowzoom-tiles.timer"
    - "delete_old_metatiles.timer"

- debug: # noqa unnamed-task
    msg: 'Tirex is ready to render tiles now. Please start bulk-rendering of tiles on zoom levels 0 to 12 using the following command:\ntirex-batch --prio 15 map=standard,maxspeed,signals z=0-12 bbox=-180,-80,180,80'
